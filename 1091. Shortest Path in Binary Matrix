class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        queue<pair<int,int>>q;
        // row,col,dis
        int n=grid.size();
        int m=grid[0].size();
        if(grid[0][0]==1||grid[n-1][m-1]==1)return -1;
        q.push({0,0});
          grid[0][0]=1;
        while(q.size()){
            int r=q.front().first;
            int c=q.front().second;
            
            q.pop();
            if(r==n-1&&c==m-1)return grid[r][c];
          
            if(r+1<n&&grid[r+1][c]==0){
                grid[r+1][c]=grid[r][c]+1;
                if(r+1==n-1&&c==m-1)return grid[r+1][c];
                q.push({r+1,c});
            }
            if(r+1<n&&c+1<m&&grid[r+1][c+1]==0){
                grid[r+1][c+1]=grid[r][c]+1;
                if(r+1==n-1&&c+1==m-1)return grid[r+1][c+1];
              q.push({r+1,c+1});
            }
            if(r+1<n&&c-1>=0&&grid[r+1][c-1]==0){
                grid[r+1][c-1]=grid[r][c]+1;
                if(r+1==n-1&&c-1==m-1)return grid[r+1][c];
                q.push({r+1,c-1});
            }
            if(r-1>=0&&c+1<m&&grid[r-1][c+1]==0){
                 grid[r-1][c+1]=grid[r][c]+1;
              if(r-1==n-1&&c+1==m-1)return grid[r][c]+1;
              q.push({r-1,c+1});
            }
            if(r-1>=0&&c<m&&grid[r-1][c]==0){
                 grid[r-1][c]=grid[r][c]+1;
              if(r-1==n-1&&c==m-1)return grid[r-1][c];
              q.push({r-1,c});
            }
            if(r-1>=0&&c-1>=0&&grid[r-1][c-1]==0){
                 grid[r-1][c-1]=grid[r][c]+1;
            if(r-1==n-1&&c-1==m-1)return grid[r-1][c-1];

             q.push({r-1,c-1});
            }
            if(r<n&&c+1<m&&grid[r][c+1]==0){
                 grid[r][c+1]=grid[r][c]+1;
              if(r==n-1&&c+1==m-1)return grid[r][c+1];
              q.push({r,c+1});
            }
            if(r<n&&c-1>=0&&grid[r][c-1]==0){
                 grid[r][c-1]=grid[r][c]+1;
             if(r==n-1&&c-1==m-1)return grid[r][c-1];
             q.push({r,c-1});
            }
        }
        return -1;
    }
};
