 int dfs(int i,int j,vector<vector<int>>&grid,vector<vector<int>>&vis,vector<vector<int>>&dp){
        int n=grid.size();
        int m=grid[0].size();

        if(i<0||j<0||i>=n||j>=m)return 0; // out of boundary
        if(vis[i][j]==1)return 0;         // if already visited
        if(grid[i][j]==1)return 0;        //obstacle
        if(i==n-1&&j==m-1)return 1;       // reached target
        if(dp[i][j]!=-1)return dp[i][j];
        vis[i][j]=1;
        int a=dfs(i+1,j,grid,vis,dp);
        int b=dfs(i,j+1,grid,vis,dp);

        vis[i][j]=0;
        return dp[i][j]= a+b;
    }
    int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>>vis(n,vector<int>(m,0));
        vector<vector<int>>dp(n+1,vector<int>(m+1,-1));

        return dfs(0,0,grid,vis,dp);

    }
